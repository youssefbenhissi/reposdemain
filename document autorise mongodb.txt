1)express --view=twig

2) en package.json changer : 
            "dependencies": {
    "cookie-parser": "~1.4.4",
    "debug": "~2.6.9",
    "express": "~4.16.1",
    "http-errors": "~1.6.3",
    "morgan": "~1.9.1",
    "twig": "^1.15.2",
    "multer": "^1.4.3",
    "mongoose": "^6.0.12",
    "util": "^0.12.4",
    "mysql2": "^2.3.0",
    "xml2js": "^0.4.23"
  },
  "devDependencies": {
    "nodemon": "^2.0.14"
  }

3)la commande npm i pour installer

4) dans package.json ,  dans "scripts" on ajoute "dev": "nodemon ./bin/www"   pour pouvoir utiliser la commande npm run-script dev


5) dans le dossier models on ajoute le fichier user.model.js
const mongoose = require("mongoose");
const userSchema = mongoose.Schema(
    {
        firstName: String,
        lastName: String,
        email: {
            type: String,
            unique: true
        },
        image: String
    },
    {
        timestamps: true
    }
    );

        const User = mongoose.model("user", userSchema);

        module.exports = User;



6) dans le dossier controllers on ajoute le fichier user.controller.js
    const User = require("../models/user.model");

module.exports = {
    showCreateForm: async (req, res, next) => {
        res.render("create")
    },
    createUser: async (req, res) => {
        const { firstName, lastName, email } = req.body;
        const userExists = await User.findOne({ email });
        if (userExists) {
            return res.status(403).json({ exists: true });
        }
        const user = new User({ firstName, lastName, email });
        if (req.file) {
            user.image = `/images/${req.file.filename}`;
        }

        await user.save();
        res.redirect("/users")
    },
    getUserById: async (req, res) => {
        const { _id } = req.params;
        const user = await User.findById(_id);
        res.render("details", { user });
    },
    getListUsers: async (req, res) => {
        const users = await User.find();
        res.render("list", { users });
    },
    deleteUser: async (req, res) => {
        const { id } = req.params;

        await User.findByIdAndDelete(id);
        console.log({ id });
        res.redirect("/users")
    },
}


7) dans le dossier routes on ajoute le fichier user.js:
    var express = require('express');
var router = express.Router();
const userController = require("../controllers/user.controller")


const multer = require("multer");
const path = require("path");

const storageData = multer.diskStorage({
    destination: (req, file, clb) => {
        clb(null, './public/images/');
    },
    filename: (req, file, cb) => {
        const newFileName = new Date().getTime().toString() + path.extname(file.originalname);
        cb(null, newFileName);
    }
});

const upload = multer({ storage : storageData })

/**
 * @Path /users
 **/
router.route("/create")
  .get(userController.showCreateForm)
  .post(upload.single("avatar") ,userController.createUser)

router.get("/", userController.getListUsers)
router.get("/:_id", userController.getUserById)
router.get("/delete/:id", userController.deleteUser)

module.exports = router;




8)dans le fichier app.js on ajoute : 
    const mongoose = require("mongoose");

mongoose.connect("mongodb://localhost:27017/revsion_5sim1")
  .then(()=>{ console.log("db connected"); })
  .catch((exc)=> console.log(exc));


  var usersRouter = require('./routes/users');
  app.use('/users', usersRouter);   



8) dans le fichier list.twig:
    <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>List users</title>
</head>
<body>
    <table>
        <tr>
            <td>First Name</td>
            <td>Last Name</td>
            <td>Email</td>
            <td>Details</td>
            <td>Delete</td>
        </tr>
        {% for user in users %}
        <tr>
            <td> {{ user.firstName }} </td>
            <td> {{ user.lastName }} </td>
            <td> {{ user.email }} </td>
            <td> <a href="/users/{{ user._id }}"> details </a> </td>
            <td> <a href="/users/delete/{{ user._id }}"> delete </a> </td>
        </tr>
        {% endfor %}
    </table>
</body>
</html>

9) dans le fichier create.twig : 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create User</title>
</head>
<body>
    <fieldset style="width: 44%; display: block; margin: auto;">
        <legend>Create User</legend>
        <form action="/users/create" method="post" enctype="multipart/form-data">
            <div style="margin-bottom: 15px;">
                <input type="text" name="firstName" placeholder="First name">
            </div>
            <div style="margin-bottom: 15px;">
                <input type="text" name="lastName" placeholder="Last name">
            </div>
            <div style="margin-bottom: 15px;">
                <input type="email" name="email" placeholder="Email">
            </div>
            <div style="margin-bottom: 15px;">
                <input type="file" name="avatar" accept="*/image" >
            </div>
            <div style="margin-bottom: 15px;">
                <input type="submit" value="Submit">
            </div>
        </form>
    </fieldset>
</body>
</html>

10) dans le fichier details.twig:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User details</title>
</head>
<body>
    <p>
        <b>Name :</b> {{ user.firstName }} {{ user.lastName }}
    </p>
    <p>
        <b>Email :</b> {{ user.email }} 
    </p>
    <div>
        <img src="{{ user.image }}" style="width: 300px;" alt="avatar">
    </div>
</body>
</html>



***************************************************************************** La dockerisation *****************************************
1) creer le fichier Dockerfile
2)  creer le fichier .dockerignore



Dokerfiler:


FROM node:12-alpine

WORKDIR /usr/app

COPY . .

RUN npm i

EXPOSE 3000

CMD [ "npm", "start" ]




----------------------------------------------Docker-compose.yml
version: "3"

services:
    my-application-container:
        image: "testing_api_5sim3"
        build: .
        ports:
            - "8080:3000"
        depends_on:
            - "mongo-db-container"

    mongo-db-container:
        image: "mongo"
        ports: 
            - "27020:27017"
        volumes:
            - database:/database-db
volumes:
    database:    




---------------------------la commande :
docker-compse up -d